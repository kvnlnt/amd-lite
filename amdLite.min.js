!function(root){var that={readyModules:[],waitingModules:[],publicScope:root,ignoreNotOptimized:!1,allowOverride:!1,verbosity:1,globalDependencies:{},namespaces:{},amdObject:null,init:function(options){"publicScope"in(options=options||{})&&(that.publicScope=options.publicScope),"verbosity"in options&&(that.verbosity=options.verbosity),"ignoreNotOptimized"in options&&(that.ignoreNotOptimized=options.ignoreNotOptimized),"allowOverride"in options&&(that.allowOverride=options.allowOverride),"globalDependencies"in options&&(that.globalDependencies=options.globalDependencies),"namespaces"in options&&(that.namespaces=options.namespaces),"amdObject"in options&&(that.amdObject=options.amdObject),this._injectPublicAPI()},_injectPublicAPI:function(){that.publicScope.requirejs=that.publicScope.require=that.require,that.publicScope.requirejs._defined=that.readyModules,that.publicScope.define=that.define,null!=that.amdObject&&(that.publicScope.define.amd=that.amdObject);for(var i in that.namespaces)that.publicScope[i]=that.publicScope[that.namespaces[i]]},require:function(dependencyNames,callback,from){from=from||"",that.verbosity>=2&&console.info("amdLite.require",dependencyNames,from);var dependencies=that.resolveDependencies(dependencyNames,from);callback.apply(null,dependencies)},define:function(name,dependencies,callback){if("string"==typeof name){if(name in that.waitingModules||name in that.readyModules){if(!that.allowOverride)throw new Error("amdLite.define // Module "+name+" is already defined.");delete that.readyModules[name],delete that.waitingModules[name],that.verbosity>=1&&console.warn("amdLite.define // Module "+name+" overridden")}that.waitingModules[name]={dependencies:dependencies,callback:callback},that.verbosity>=2&&console.info("amdLite.define //",name,dependencies)}else{var message="amdLite.define // Not optimized AMD module detected.";if(message+="\n@see https://github.com/zouloux/amd-lite#optimization",message+="\n@see http://requirejs.org/docs/optimization.html",!that.ignoreNotOptimized)throw new Error(message);that.verbosity>=1&&console.warn(message)}},normalizeModuleName:function(name,baseName){var i,part,baseParts=baseName&&baseName.split("/");if(name){for("."===(name=name.split("/"))[0].charAt(0)&&baseParts&&(name=baseParts.slice(0,baseParts.length-1).concat(name)),i=0;i<name.length;i++)if("."===(part=name[i]))name.splice(i,1),i-=1;else if(".."===part){if(0===i||1===i&&".."===name[2]||".."===name[i-1])continue;i>0&&(name.splice(i-1,2),i-=2)}name=name.join("/")}return name},resolveDependencies:function(dependencyNames,from){return dependencyNames.map(function(dependencyName){var dependencyPath=that.normalizeModuleName(dependencyName,from),dependencyInstance=that.resolveDependency(dependencyPath);if(null==dependencyInstance){var message="amdLite.resolveDependencies // Module "+dependencyPath+" not found.";if(that.strict)throw new Error(message);that.verbosity>=1&&console.warn(message)}return dependencyInstance})},resolveDependency:function(dependencyPath){if("require"==dependencyPath)return require;if("exports"==dependencyPath)return{};if(dependencyPath in that.globalDependencies){var dependencyGlobalName=that.globalDependencies[dependencyPath];return dependencyGlobalName in that.publicScope?that.publicScope[dependencyGlobalName]:null}if(dependencyPath in that.readyModules)return that.readyModules[dependencyPath];if(dependencyPath in that.waitingModules){var moduleToBuild=that.waitingModules[dependencyPath],dependencies=that.resolveDependencies(moduleToBuild.dependencies,dependencyPath),callbackReturn=moduleToBuild.callback.apply(null,dependencies),exportsIndex=moduleToBuild.dependencies.indexOf("exports"),buildModule=-1===exportsIndex?callbackReturn:dependencies[exportsIndex];return that.readyModules[dependencyPath]=buildModule,delete that.waitingModules[dependencyPath],buildModule}return null}};"object"==typeof exports&&"string"!=typeof exports.nodeName?exports.amdLite=that:root.amdLite=that,"object"==typeof amdLiteConfig&&that.init(amdLiteConfig)}("undefined"!=typeof self?self:this);